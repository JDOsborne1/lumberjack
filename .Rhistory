mutate(
basedate = str_match(basedate_file, "\\d{2}-\\d{2}-\\d{2}")[[1]]#,
# dayval = ifelse(grepl(daymatch,rawlog), str_match(rawlog, daymatch), NA),
# timeval = ifelse(grepl(timematch,rawlog), str_match(rawlog, timematch), NA),
# jobval = ifelse(grepl(jobnomatch,rawlog), str_match(rawlog, jobnomatch), NA),
# flagval = grepl(flagmatch, rawlog),
# log = str_match(rawlog, logmatch)[,2]
)
ref_date <- str_match(basedate_file, "\\d{2}-\\d{2}-\\d{2}")[[1]]
linedf3 <- linedf2 %>%
mutate(
basedate = ref_date#,
# dayval = ifelse(grepl(daymatch,rawlog), str_match(rawlog, daymatch), NA),
# timeval = ifelse(grepl(timematch,rawlog), str_match(rawlog, timematch), NA),
# jobval = ifelse(grepl(jobnomatch,rawlog), str_match(rawlog, jobnomatch), NA),
# flagval = grepl(flagmatch, rawlog),
# log = str_match(rawlog, logmatch)[,2]
)
linedf3 <- linedf2 %>%
mutate(
basedate = ref_date
)
library("dplyr", lib.loc="~/R/win-library/3.6")
linedf3 <- linedf2 %>%
mutate(
basedate = ref_date
)
require(dplyr)
require(stringr)
require(lubridate)
require(zoo)
library(dplyr)
library(stringr)
library(lubridate)
library(zoo)
linedf2 <- lines %>%
enframe(name = NULL, value = "rawlog")
# Set of regexes
daymatch <- "--(\\S*)--"
timematch <- "(\\d{2}:\\d{2})"
flagmatch <- "\\d{2}:\\d{2} (FLAG):"
jobnomatch <- "\\(\\S*\\)$"
logmatch <- "\\d{2} ([\\s*\\S*]*) \\("
ref_date <- str_match(basedate_file, "\\d{2}-\\d{2}-\\d{2}")[[1]]
linedf3 <- linedf2 %>%
mutate(
basedate = ref_date
)
View(linedf2)
linedf3 <- linedf2 %>%
mutate(
basedate = ref_date
)
source('C:/Users/j_osborne/lumberjack/prime script.R')
source('C:/Users/j_osborne/lumberjack/prime script.R')
source('C:/Users/j_osborne/lumberjack/prime script.R')
source('C:/Users/j_osborne/lumberjack/prime script.R')
source('C:/Users/j_osborne/lumberjack/prime script.R')
source('C:/Users/j_osborne/lumberjack/prime script.R')
source('C:/Users/j_osborne/lumberjack/prime script.R')
Log_Summary %>%
group_by(Day) %>%
summarise(Day.Worked = sum(Hours.Spent, na.rm = T))
source('C:/Users/j_osborne/lumberjack/prime script.R')
source('C:/Users/j_osborne/lumberjack/prime script.R')
source('C:/Users/j_osborne/lumberjack/prime script.R')
View(Log_Summary)
source('C:/Users/j_osborne/lumberjack/prime script.R')
Log_Summary %>% group_by(JobNumber) %>% summarise(Total.Time = sum(Hours.Spent))
Log_Summary %>% group_by(JobNumber) %>% summarise(Total.Time = sum(Hours.Spent)) %>% arrange(desc(Total.Time)) %>% View()
View(logfile)
7/7
57/7.5
source('C:/Users/j_osborne/lumberjack/prime script.R')
Log_Summary %>%
group_by(Day) %>%
summarise(Day.Worked = sum(Hours.Spent, na.rm = T)) %>% pull(Day.Worked) %>% sum(na.rm = T)
Log_Summary %>%
group_by(Day) %>%
summarise(Day.Worked = sum(Hours.Spent, na.rm = T))
source('C:/Users/j_osborne/lumberjack/prime script.R')
source('C:/Users/j_osborne/lumberjack/data_transform.R')
source('C:/Users/j_osborne/lumberjack/prime script.R')
class(as.data.frame(iris))
tracked.df <- function(a_df){
if("data.frame" %in% class(a_df)){
stop("not a data frame")
}
}
tracked.df("test")
tracked.df <- function(a_df){
if(!"data.frame" %in% class(a_df)){
stop("not a data frame")
}
}
tracked.df("test")
tracked.df(iris)
tracked.df <- function(a_df){
if(!"data.frame" %in% class(a_df)){
stop("not a data frame")
}
structure(data.frame(a_df), class = "tracked_df")
}
tracked.df(iris)
metaTrack <- function(arg1) UseMethod("metaTrack")
metaTrack.default <- function(arg1) "not defined for this class"
metaTrack("s")
writeDict <- function(element, level) {
# wrapper to abstract the writing decisions into a writer
print("writing a base dict")
}
megaTrack.data.frame <- function(a_df, identified_by){
writeDict(a_df, level = identified_by)
}
megaTrack.list <- function(a_list, level = "default"){
writeDict(a_list, level = level)
}
megaTrack.default <- function(arg1) "not defined for this class"
megaTrack <- function(arg1) UseMethod("metaTrack")
megaTrack(list(a=1))
class(list(a=1))
megaTrack <- function(arg1) UseMethod("metaTrack")
megaTrack.default <- function(arg1) "not defined for this class"
megaTrack.list <- function(a_list, level = "default"){
writeDict(a_list, level = level)
}
megaTrack.data.frame <- function(a_df, identified_by){
writeDict(a_df, level = identified_by)
}
writeDict <- function(element, level) {
# wrapper to abstract the writing decisions into a writer
print("writing a base dict")
}
megaTrack(list(a=1))
megaTrack(as.list(list(a=1))
)
megaTrack(as.list(list(a=1))
megaTrack(as.list(list(a=1))
megaTrack(as.list(list(a=1))
megaTrack(as.list(list(a=1)))
megaTrack(as.list(list(a=1)))
megaTrack <- function(arg1) UseMethod("metaTrack")
megaTrack.list <- function(a_list, level = "default"){
writeDict(a_list, level = level)
}
megaTrack.data.frame <- function(a_df, identified_by){
writeDict(a_df, level = identified_by)
}
writeDict <- function(element, level) {
# wrapper to abstract the writing decisions into a writer
print("writing a base dict")
}
megaTrack(as.list(list(a=1)))
megaTrack(as.data.frame(list(a=1)))
source('C:/Users/j_osborne/lumberjack/prime script.R')
source('C:/Users/j_osborne/lumberjack/prime script.R')
source('C:/Users/j_osborne/lumberjack/prime script.R')
Log_Summary %>%
group_by(Day) %>%
summarise(Day.Worked = sum(Hours.Spent, na.rm = T))
source('C:/Users/j_osborne/lumberjack/prime script.R')
View(logfile)
logfile %>% filter(jobval == "(EvoqueButton)")
logfile %>% filter(jobval == "(EvoqueButton)") %>% pull(timestamp) %>% min()
logfile %>% filter(jobval == "(DefenderKMI)") %>% pull(timestamp) %>% max()
source('C:/Users/j_osborne/lumberjack/prime script.R')
source('C:/Users/j_osborne/lumberjack/prime script.R')
Log_Summary %>%
group_by(Day) %>%
summarise(Day.Worked = sum(Hours.Spent, na.rm = T))
Log_Summary <- logfile %>%
rename(Timestamp = timestamp, Log = log, JobNumber = jobval, Flag = flagval, Timediff = timediff)  %>%
filter(Timestamp > as.Date("2019-11-03") & Timestamp < as.Date("2019-11-10")) %>%
mutate(
Day = lubridate::wday(Timestamp, label = T)
, Pretty.Date = format(as.Date(Timestamp), "%d-%b")
) %>%
aggregateJobs() %>%
group_by(Pretty.Date, JobNumber) %>%
summarise(Timeseg = as.integer(sum(Timediff)),Seconds.Spent = lubridate::as.duration(Timeseg), Day = max(Day)) %>%
filter(!JobNumber %in% c("(-)")) %>%
select(Pretty.Date, Day, JobNumber, Seconds.Spent) %>%
mutate(Hours.Spent = Seconds.Spent/dhours(1))
View(Log_Summary)
Log_Summary <- logfile %>%
rename(Timestamp = timestamp, Log = log, JobNumber = jobval, Flag = flagval, Timediff = timediff)  %>%
filter(Timestamp > as.Date("2019-11-10") & Timestamp < as.Date("2019-11-17")) %>%
mutate(
Day = lubridate::wday(Timestamp, label = T)
, Pretty.Date = format(as.Date(Timestamp), "%d-%b")
) %>%
aggregateJobs() %>%
group_by(Pretty.Date, JobNumber) %>%
summarise(Timeseg = as.integer(sum(Timediff)),Seconds.Spent = lubridate::as.duration(Timeseg), Day = max(Day)) %>%
filter(!JobNumber %in% c("(-)")) %>%
select(Pretty.Date, Day, JobNumber, Seconds.Spent) %>%
mutate(Hours.Spent = Seconds.Spent/dhours(1))
View(Log_Summary)
Log_Summary <- logfile %>%
rename(Timestamp = timestamp, Log = log, JobNumber = jobval, Flag = flagval, Timediff = timediff)  %>%
filter(Timestamp > as.Date("2019-11-10") & Timestamp < as.Date("2019-11-31")) %>%
mutate(
Day = lubridate::wday(Timestamp, label = T)
, Pretty.Date = format(as.Date(Timestamp), "%d-%b")
) %>%
aggregateJobs() %>%
group_by(Pretty.Date, JobNumber) %>%
summarise(Timeseg = as.integer(sum(Timediff)),Seconds.Spent = lubridate::as.duration(Timeseg), Day = max(Day)) %>%
filter(!JobNumber %in% c("(-)")) %>%
select(Pretty.Date, Day, JobNumber, Seconds.Spent) %>%
mutate(Hours.Spent = Seconds.Spent/dhours(1))
Log_Summary <- logfile %>%
rename(Timestamp = timestamp, Log = log, JobNumber = jobval, Flag = flagval, Timediff = timediff)  %>%
filter(Timestamp > as.Date("2019-11-10") & Timestamp < as.Date("2019-11-30")) %>%
mutate(
Day = lubridate::wday(Timestamp, label = T)
, Pretty.Date = format(as.Date(Timestamp), "%d-%b")
) %>%
aggregateJobs() %>%
group_by(Pretty.Date, JobNumber) %>%
summarise(Timeseg = as.integer(sum(Timediff)),Seconds.Spent = lubridate::as.duration(Timeseg), Day = max(Day)) %>%
filter(!JobNumber %in% c("(-)")) %>%
select(Pretty.Date, Day, JobNumber, Seconds.Spent) %>%
mutate(Hours.Spent = Seconds.Spent/dhours(1))
View(Log_Summary)
Log_Summary <- logfile %>%
rename(Timestamp = timestamp, Log = log, JobNumber = jobval, Flag = flagval, Timediff = timediff)  %>%
filter(Timestamp > as.Date("2019-11-10") & Timestamp < as.Date("2019-11-17")) %>%
mutate(
Day = lubridate::wday(Timestamp, label = T)
, Pretty.Date = format(as.Date(Timestamp), "%d-%b")
) %>%
aggregateJobs() %>%
group_by(Pretty.Date, JobNumber) %>%
summarise(Timeseg = as.integer(sum(Timediff)),Seconds.Spent = lubridate::as.duration(Timeseg), Day = max(Day)) %>%
filter(!JobNumber %in% c("(-)")) %>%
select(Pretty.Date, Day, JobNumber, Seconds.Spent) %>%
mutate(Hours.Spent = Seconds.Spent/dhours(1))
View(Log_Summary)
Log_Summary %>%
group_by(Day) %>%
summarise(Day.Worked = sum(Hours.Spent, na.rm = T))
source('C:/Users/j_osborne/lumberjack/prime script.R')
source('C:/Users/j_osborne/lumberjack/prime script.R')
Log_Summary <- logfile %>%
rename(Timestamp = timestamp, Log = log, JobNumber = jobval, Flag = flagval, Timediff = timediff)  %>%
filter(Timestamp > as.Date("2019-11-03") & Timestamp < as.Date("2019-11-17")) %>%
mutate(
Day = lubridate::wday(Timestamp, label = T)
, Pretty.Date = format(as.Date(Timestamp), "%d-%b")
) %>%
aggregateJobs() %>%
group_by(Pretty.Date, JobNumber) %>%
summarise(Timeseg = as.integer(sum(Timediff)),Seconds.Spent = lubridate::as.duration(Timeseg), Day = max(Day)) %>%
filter(!JobNumber %in% c("(-)")) %>%
select(Pretty.Date, Day, JobNumber, Seconds.Spent) %>%
mutate(Hours.Spent = Seconds.Spent/dhours(1))
View(Log_Summary)
Log_Summary <- logfile %>%
rename(Timestamp = timestamp, Log = log, JobNumber = jobval, Flag = flagval, Timediff = timediff)  %>%
filter(Timestamp > as.Date("2019-11-16") & Timestamp < as.Date("2019-11-24")) %>%
mutate(
Day = lubridate::wday(Timestamp, label = T)
, Pretty.Date = format(as.Date(Timestamp), "%d-%b")
) %>%
aggregateJobs() %>%
group_by(Pretty.Date, JobNumber) %>%
summarise(Timeseg = as.integer(sum(Timediff)),Seconds.Spent = lubridate::as.duration(Timeseg), Day = max(Day)) %>%
filter(!JobNumber %in% c("(-)")) %>%
select(Pretty.Date, Day, JobNumber, Seconds.Spent) %>%
mutate(Hours.Spent = Seconds.Spent/dhours(1))
View(Log_Summary)
Log_Summary %>%
group_by(Day) %>%
summarise(Day.Worked = sum(Hours.Spent, na.rm = T)) %>% pull(Day.Worked) %>% sum(na.rm = T)
source('C:/Users/j_osborne/lumberjack/prime script.R')
source('C:/Users/j_osborne/lumberjack/prime script.R')
Log_Summary <- logfile %>%
rename(Timestamp = timestamp, Log = log, JobNumber = jobval, Flag = flagval, Timediff = timediff)  %>%
filter(Timestamp > as.Date("2019-11-24") & Timestamp < as.Date("2019-11-30")) %>%
mutate(
Day = lubridate::wday(Timestamp, label = T)
, Pretty.Date = format(as.Date(Timestamp), "%d-%b")
) %>%
aggregateJobs() %>%
group_by(Pretty.Date, JobNumber) %>%
summarise(Timeseg = as.integer(sum(Timediff)),Seconds.Spent = lubridate::as.duration(Timeseg), Day = max(Day)) %>%
filter(!JobNumber %in% c("(-)")) %>%
select(Pretty.Date, Day, JobNumber, Seconds.Spent) %>%
mutate(Hours.Spent = Seconds.Spent/dhours(1))
View(Log_Summary)
source('C:/Users/j_osborne/lumberjack/prime script.R')
source('C:/Users/j_osborne/lumberjack/prime script.R')
Log_Summary <- logfile %>%
rename(Timestamp = timestamp, Log = log, JobNumber = jobval, Flag = flagval, Timediff = timediff)  %>%
# filter(Timestamp > as.Date("2019-11-24") & Timestamp < as.Date("2019-11-30")) %>%
mutate(
Day = lubridate::wday(Timestamp, label = T)
, Pretty.Date = format(as.Date(Timestamp), "%d-%b")
) %>%
aggregateJobs() %>%
group_by(Pretty.Date, JobNumber) %>%
summarise(Timeseg = as.integer(sum(Timediff)),Seconds.Spent = lubridate::as.duration(Timeseg), Day = max(Day)) %>%
filter(!JobNumber %in% c("(-)")) %>%
select(Pretty.Date, Day, JobNumber, Seconds.Spent) %>%
mutate(Hours.Spent = Seconds.Spent/dhours(1))
View(Log_Summary)
Log_Summary <- logfile %>%
rename(Timestamp = timestamp, Log = log, JobNumber = jobval, Flag = flagval, Timediff = timediff)  %>%
filter(
Timestamp > as.Date("2019-10-24")
# &
#   Timestamp < as.Date("2019-11-30")
) %>%
mutate(
Day = lubridate::wday(Timestamp, label = T)
, Pretty.Date = format(as.Date(Timestamp), "%d-%b")
) %>%
aggregateJobs() %>%
group_by(Pretty.Date, JobNumber) %>%
summarise(Timeseg = as.integer(sum(Timediff)),Seconds.Spent = lubridate::as.duration(Timeseg), Day = max(Day)) %>%
filter(!JobNumber %in% c("(-)")) %>%
select(Pretty.Date, Day, JobNumber, Seconds.Spent) %>%
mutate(Hours.Spent = Seconds.Spent/dhours(1))
View(Log_Summary)
config::get("MissingJobnos")
install.packages("config")
config::get("MissingJobnos")
Log_Summary <- logfile %>%
rename(Timestamp = timestamp, Log = log, JobNumber = jobval, Flag = flagval, Timediff = timediff)  %>%
filter(JobNumber %in% config::get("MissingJobnos")) %>%
# filter(
#   Timestamp > as.Date("2019-10-24")
#        &
#          Timestamp < as.Date("2019-11-30")
#   ) %>%
mutate(
Day = lubridate::wday(Timestamp, label = T)
, Pretty.Date = format(as.Date(Timestamp), "%d-%b")
) %>%
aggregateJobs() %>%
group_by(Pretty.Date, JobNumber) %>%
summarise(Timeseg = as.integer(sum(Timediff)),Seconds.Spent = lubridate::as.duration(Timeseg), Day = max(Day)) %>%
filter(!JobNumber %in% c("(-)")) %>%
select(Pretty.Date, Day, JobNumber, Seconds.Spent) %>%
mutate(Hours.Spent = Seconds.Spent/dhours(1))
View(Log_Summary)
## Salesforce Integration Tests
library(RForcecom)
instanceURL <- "https://edit.my.salesforce.com/"
apiVersion <- "26.0"
(
session <- rforcecom.login(
rstudioapi::askForPassword("Database user")
, paste0(
rstudioapi::askForPassword("Password")
,
rstudioapi::askForPassword("Security Token")
)
, instanceURL
, apiVersion)
)
## Salesforce Integration Tests
library(RForcecom)
instanceURL <- "https://edit.my.salesforce.com/"
apiVersion <- "26.0"
(
session <- rforcecom.login(
rstudioapi::askForPassword("Database user")
, paste0(
rstudioapi::askForPassword("Password")
,
rstudioapi::askForPassword("Security Token")
)
, instanceURL
, apiVersion)
)
rforcecom.query(session, "Select Id, Name From Account")
rforcecom.getObjectList(session)
rforcecom.getObjectList(session) %>% View()
rforcecom.getObjectList(session) -> test
test %>% filter(grepl("Timecard", name))
test %>% filter(grepl("Timecard", name)) %>% View()
rforcecom.query(session, "Select * From Timecard") -> timecard
Log_Summary <- logfile %>%
rename(Timestamp = timestamp, Log = log, JobNumber = jobval, Flag = flagval, Timediff = timediff)  %>%
filter(JobNumber %in% config::get("MissingJobnos")) %>%
# filter(
#   Timestamp > as.Date("2019-10-24")
#        &
#          Timestamp < as.Date("2019-11-30")
#   ) %>%
mutate(
Day = lubridate::wday(Timestamp, label = T)
, Pretty.Date = format(as.Date(Timestamp), "%d-%b")
) %>%
aggregateJobs() %>%
group_by(Pretty.Date, JobNumber) %>%
summarise(Timeseg = as.integer(sum(Timediff)),Seconds.Spent = lubridate::as.duration(Timeseg), Day = max(Day)) %>%
filter(!JobNumber %in% c("(-)")) %>%
select(Pretty.Date, Day, JobNumber, Seconds.Spent) %>%
mutate(Hours.Spent = Seconds.Spent/dhours(1))
View(Log_Summary)
source('C:/Users/j_osborne/lumberjack/prime script.R')
logfile %>% count(jobval)
logfile %>% count(jobval) %>% View()
source('C:/Users/j_osborne/lumberjack/prime script.R')
Log_Summary <- logfile %>%
aggregateJobs() %>%
rename(Timestamp = timestamp, Log = log, JobNumber = jobval, Flag = flagval, Timediff = timediff)  %>%
filter(JobNumber %in% config::get("MissingJobnos")) %>%
# filter(
#   Timestamp > as.Date("2019-10-24")
#        &
#          Timestamp < as.Date("2019-11-30")
#   ) %>%
mutate(
Day = lubridate::wday(Timestamp, label = T)
, Pretty.Date = format(as.Date(Timestamp), "%d-%b")
) %>%
aggregateJobs() %>%
group_by(Pretty.Date, JobNumber) %>%
summarise(Timeseg = as.integer(sum(Timediff)),Seconds.Spent = lubridate::as.duration(Timeseg), Day = max(Day)) %>%
filter(!JobNumber %in% c("(-)")) %>%
select(Pretty.Date, Day, JobNumber, Seconds.Spent) %>%
mutate(Hours.Spent = Seconds.Spent/dhours(1))
Log_Summary <- logfile %>%
rename(Timestamp = timestamp, Log = log, JobNumber = jobval, Flag = flagval, Timediff = timediff)  %>%
# filter(
#   Timestamp > as.Date("2019-10-24")
#        &
#          Timestamp < as.Date("2019-11-30")
#   ) %>%
mutate(
Day = lubridate::wday(Timestamp, label = T)
, Pretty.Date = format(as.Date(Timestamp), "%d-%b")
) %>%
aggregateJobs() %>%
filter(JobNumber %in% config::get("MissingJobnos")) %>%
group_by(Pretty.Date, JobNumber) %>%
summarise(Timeseg = as.integer(sum(Timediff)),Seconds.Spent = lubridate::as.duration(Timeseg), Day = max(Day)) %>%
filter(!JobNumber %in% c("(-)")) %>%
select(Pretty.Date, Day, JobNumber, Seconds.Spent) %>%
mutate(Hours.Spent = Seconds.Spent/dhours(1))
View(Log_Summary)
Log_Summary %>%
group_by(Day) %>%
summarise(Day.Worked = sum(Hours.Spent, na.rm = T)) %>% pull(Day.Worked) %>% sum(na.rm = T)
Log_Summary <- logfile %>%
rename(Timestamp = timestamp, Log = log, JobNumber = jobval, Flag = flagval, Timediff = timediff)  %>%
# filter(
#   Timestamp > as.Date("2019-10-24")
#        &
#          Timestamp < as.Date("2019-11-30")
#   ) %>%
mutate(
Day = lubridate::wday(Timestamp, label = T)
, Pretty.Date = format(as.Date(Timestamp), "%d-%b")
) %>%
aggregateJobs() %>%
filter(JobNumber %in% config::get("MissingJobnos")) %>%
group_by(Pretty.Date, JobNumber) %>%
summarise(Timeseg = as.integer(sum(Timediff)),Seconds.Spent = lubridate::as.duration(Timeseg), Day = max(Day)) %>%
filter(!JobNumber %in% c("(-)")) %>%
select(Pretty.Date, Day, JobNumber, Seconds.Spent) %>%
mutate(Hours.Spent = Seconds.Spent/dhours(1))
View(Log_Summary)
Log_Summary %>%
group_by(Day) %>%
summarise(Day.Worked = sum(Hours.Spent, na.rm = T)) %>% pull(Day.Worked) %>% sum(na.rm = T)
instanceURL <- "https://edit.my.salesforce.com/"
apiVersion <- "26.0"
(
session <- rforcecom.login(
rstudioapi::askForPassword("Database user")
, paste0(
rstudioapi::askForPassword("Password")
,
rstudioapi::askForPassword("Security Token")
)
, instanceURL
, apiVersion)
)
(
session <- rforcecom.login(
rstudioapi::askForPassword("Database user")
, paste0(
rstudioapi::askForPassword("Password")
,
rstudioapi::askForPassword("Security Token")
)
, instanceURL
, apiVersion)
)
(
session <- rforcecom.login(
"joseph.osborne@edit.co.uk"
, paste0(
rstudioapi::askForPassword("Password")
,
rstudioapi::askForPassword("Security Token")
)
, instanceURL
, apiVersion)
)
rforcecom.query(session, "Select all From Timecard") -> timecard
rforcecom.getObjectList(session) -> test
view(test)
rforcecom.query(session, "Select all From pse__Timecard__c") -> timecard
rforcecom.query(session, "Select all From pse__Timecard__c") -> timecard
rforcecom.query(session, "Select * From pse__Timecard__c") -> timecard
rforcecom.query(session, "Select . From pse__Timecard__c") -> timecard
